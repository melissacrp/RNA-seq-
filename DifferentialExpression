## Gene-level differential expression analysis using edgeR - based of arabdesign

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(version = "3.12")

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
BiocManager::install("edgeR")



BiocManager::install("limma")

install.packages("statmod")
library(limma)
library(edgeR)
library(gplots)
getwd()


#common info
matrixDGA <- read.delim(file = "/Users/melissa/Desktop/Transcriptomics&Bioinformatics | Thesis/counts/clean_banana_featurecounts.txt", header = TRUE, 
                        sep=" ")
Cultivar <- factor(c("T","T","T","T","T","T","W","W","W","W","W","W"))
tpi <- factor(c("6h","12h","24h","72h","144h","168h","6h","12h","24h","72h","144h","168h")) #C is 6-12h with mock
colnames(matrixDGA) = c("Gene ID","CT6-12h","T12h","T24h","T3d","T6d","T7d","CW6-12h","W12h","W24h","W3d","W6d","W7d")
types <- factor(c("CT6-12h","T12h","T24h","T3d","T6d","T7d","CW6-12h","W12h","W24h","W3d","W6d","W7d"))

#here need to account for no replicatesr
y <- DGEList(counts=matrixDGA[,2:13], genes=matrixDGA[,1],group = types)

#create conditions matrix
targets <- data.frame(Sample = colnames(y),Cultivar,tpi)
Group <- factor(paste(targets$Cultivar,targets$tpi,sep="."))
cbind(targets,Group=Group)


keep <- filterByExpr(y) #keeps rows that have worthwhile counts in a minumum number of samples (two samples in this case because the smallest group size is two
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE] #filtrar los que no tienen un nivel significativo de expresion
y <- calcNormFactors(y)
y$samples

plotMDS(y) #data exploration

#create a design matrix
design <- model.matrix(~0+Group)
colnames(design) <- levels(Group)

#assigning a bcv value because there is no way to estimate dispersion 
bcv <- 0.2
fit <- glmFit(y, design, dispersion = bcv^2)
#likelihood (it was changed)
lrt <- glmLRT(fit,coef=2)
topTags(lrt)
lrt

my.contrasts <- makeContrasts(
  T.12vs6 = T.12h-T.6h,
  T.24vs6 = T.24h-T.6h,
  T.72vs6 = T.72h-T.6h,
  T.144vs6 = T.144h-T.6h,
  T.168vs6 = T.168h-T.6h,
  W.12vs6 = W.12h-W.6h,
  W.24vs6 = W.24h-W.6h,
  W.72vs6 = W.72h-W.6h,
  W.144vs6 = W.144h-W.6h,
  W.168vs6 = W.168h-W.6h,
  TvsW.6h = T.6h-W.6h,
  #Unique genes in resistant cultivar
  TvsW.12h = (T.12h-T.6h)-(W.12h-W.6h),
  TvsW.24h = (T.24h-T.6h)-(W.24h-W.6h),
  TvsW.72h = (T.72h-T.6h)-(W.72h-W.6h),
  TvsW.144h = (T.144h-T.6h)-(W.144h-W.6h),
  TvsW.168h = (T.168h-T.6h)-(W.168h-W.6h),
  #Unique genes in susceptible cultivar
  WvsT.12h = (W.12h-W.6h)-(T.12h-T.6h),
  WvsT.24h = (W.24h-W.6h)-(T.24h-T.6h),
  WvsT.72h = (W.72h-W.6h)-(T.72h-T.6h),
  WvsT.144h = (W.144h-W.6h)-(T.144h-T.6h),
  WvsT.168h = (W.168h-W.6h)-(T.168h-T.6h),
  levels=design)
  
fit.col.names <- colnames(fit)
fit.col.names[1:6]

cntr <- list("T.12vs6","T.24vs6","T.72vs6","T.144vs6","T.168vs6","W.12vs6","W.24vs6","W.72vs6","W.144vs6","W.168vs6",
             "TvsW.6h","TvsW.12h","TvsW.24h","TvsW.72h","TvsW.144h","TvsW.168h")

#FIlter
#this is done to all the treatments
keep <- out1$table$FDR < 0.05 & abs(out$table$logFC) > 1
filt <- out1[keep,]

for (i in cntr) {
  a = glmLRT(fit, contrast=my.contrasts[, i])
  assign(paste0("qlf-", i), a)
  b = plotMD(a)
  assign(paste0("plot-", i), b)
  c = topTags(a)
  assign(paste0("tTags-", i), c)
  write.csv(c, paste0(i,".csv"))
  keep <- c$table$FDR < 0.05 & abs(c$table$logFC) > 1
  filt <- c[keep,]
  write.csv(filt, paste0(i,"-filt.csv")
  d = decideTests(a)
  assign(paste0("smr-", i), d)
}


#pathogen effect in Tuu gia cultivar and show the top genes
qlfT <- glmLRT(fit, coef = c(1,2,3,4,5,6))
topTags(qlfT)
summary(decideTests(qlfT))

#pathogen effect in Williams cultivar and show the top genes
qlfW <- glmLRT(fit, coef = c(7,8,9,10,11,12))
topTags(qlfW)
summary(decideTests(qlfW))


#to create heatmaps
logCPM <- cpm(y, prior.count=2, log=TRUE)
rownames(logCPM) <- y$genes$genes
colnames(logCPM) <- paste(y$samples$group)
o <- order(filt$table$PValue)
logCPM <- logCPM[o[1:30],]
coolmap(logCPM, margins=c(7,7), lhei=c(1,6), lwid=c(1,3))
#######


#effect of pathogen among all cultivars
qlf <- glmLRT(fit, coef = c(1:12))
topTags(qlf)
summary(decideTests(qlf))

qlfA <- glmLRT(fit)
topTags(qlfA)
summary(decideTests(qlfA))

#counts-per-million for the top gene
top <- rownames(topTags(qlf))
cpm(y)[top,]
#The total number of genes significantly up-regulated or down-regulated at 5% FDR
summary(decideTests(qlf))
plotMD(qlf)
abline(h=c(-1,1), col="blue")


